package main

import cl "clay"
import "core:fmt"
import "core:log"

game_entries := [][]string {
    {
        "The Legend of Zelda",
        "Rescue the princess lol",
        "cores/fceumm_libretro.so",
        "roms/Legend of Zelda, The (U) (PRG1) [!].nes",
    },
    {
        "Super Mario Bros",
        "Stomp on some goombas and eat mushrooms idk",
        "cores/fceumm_libretro.so",
        "roms/Super Mario Bros. (Europe) (Rev A).nes"
    },
    {
        "Super Castlevania IV",
        "Kill dracula. That's it, go",
        "cores/bsnes_libretro_debug.so",
        "roms/Super Castlevania IV (USA).sfc"
    },
    {
        "Donkey Kong Country GBC",
        "Return to monke",
        "cores/gambatte_libretro.so",
        "roms/Donkey Kong Country (UE).gbc"
    },
}

@(private="file")
UiMenuEntries :: enum {
    Play = 0,
    Settings,
    Logout,
    Quit,
}

@(private="file")
selected_entry: UiMenuEntries = auto_cast -1

UiMenuEntriesDefinition: UiListDefinition = {
    orientation = .Vertical,
    elem_type = .MAIN_MENU_ENTRY,
}

UiMenuContentDefinition: UiListDefinition = {
    orientation = .Vertical,
    elem_type = .MAIN_CONTENT_ENTRY,
}

ui_handle_menu_item_press :: proc (entry: UiMenuEntries) {
    UiMenuEntriesDefinition.next_list = nil

    #partial switch entry {
        case .Play:
        UiMenuEntriesDefinition.next_list = &UiMenuContentDefinition
        UiMenuContentDefinition.elem_count = len(game_entries)
        ui_select_right()
        case .Logout:
        logout()
        case .Quit:
        STATE.should_exit = true
    }

    selected_entry = entry
}

ui_menu_init :: proc () {
    UiMenuEntriesDefinition.elem_count = len(UiMenuEntries)
    UI_STATE.selected_list.next_list = &UiMenuEntriesDefinition

    UiMenuContentDefinition.prev_list = &UiMenuEntriesDefinition

    run_game(game_entries[0][2], game_entries[0][3])
    STATE.core.api.run()
    render_texture_init()
}

ui_layout_game_entry :: proc (game: []string, index: int) {
    style, should_press := ui_decide_layout_and_action_state(
        { .MAIN_CONTENT_ENTRY, index }, UI_MENU_MAIN_CONTENT_STYLING, UI_MENU_MAIN_CONTENT_STYLING_SELECTED)

    if should_press {
        run_game(game[2], game[3])
    }

    if cl.UI()(style) {
        cl.Text(game[0], cl.TextConfig({
            fontSize = UI_FONTSIZE_20,
            textColor = UI_COLOR_MAIN_TEXT,
        }))
    }
}

ui_layout_menu_entry :: proc (entry: UiMenuEntries) {
    style, should_press := ui_decide_layout_and_action_state(
        { .MAIN_MENU_ENTRY, int(entry) }, UI_MENU_ENTRY_STYLING, UI_MENU_ENTRY_STYLING_SELECTED)

    if should_press {
        ui_handle_menu_item_press(entry)
    }

    if cl.UI()(style) {
        cl.Text(fmt.aprint(entry), cl.TextConfig({
            textColor = UI_COLOR_MAIN_TEXT,
            fontSize = UI_FONTSIZE_24,
        }))
    }
}

ui_layout_main_menu_screen :: proc () {
    if cl.UI()({
        layout = {
            sizing = { width = cl.SizingGrow({}), height = cl.SizingGrow({}) },
        },
        backgroundColor = UI_COLOR_BACKGROUND,
    }) {
        // Sidebar
        if cl.UI()({
            layout = {
                sizing = {
                    width = cl.SizingFixed(UI_SPACING_256),
                    height = cl.SizingGrow({}),
                },
                layoutDirection = .TopToBottom,
            },
            backgroundColor = UI_COLOR_SECONDARY_BACKGROUND,
        }) {
            if cl.UI()({
                layout = {
                    sizing = {
                        width = cl.SizingGrow({}),
                        height = cl.SizingFit({})
                    },
                    childAlignment = {
                        x = .Center,
                        y = .Center,
                    },
                    padding = cl.PaddingAll(UI_SPACING_32),
                }
            }) {
                cl.Text(STATE.current_user, cl.TextConfig({
                    textAlignment = .Center,
                    textColor = UI_COLOR_MAIN_TEXT,
                    fontSize = UI_FONTSIZE_48
                }))
            }


            if cl.UI()({
                layout = {
                    sizing = {
                        width = cl.SizingGrow({}),
                        height = cl.SizingGrow({}),
                    },
                },
            }) {}

            for entry in UiMenuEntries {
                ui_layout_menu_entry(entry)
            }
        }

        // Main content
        if cl.UI()({
            layout = {
                sizing = {
                    width = cl.SizingGrow({}),
                    height = cl.SizingGrow({}),
                },
                layoutDirection = .TopToBottom,
            },
            scroll = { vertical = true },
        }) {
            #partial switch selected_entry {
            case .Play:
                for game, index in game_entries {
                    ui_layout_game_entry(game, index)
                }
            // case .Settings:
            //     for setting in STATE.settings
            }
        }
    }
}
